// Autogenerated from Pigeon (v21.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

class ViewMessage {
  ViewMessage({
    this.viewId,
  });

  int? viewId;

  Object encode() {
    return <Object?>[
      viewId,
    ];
  }

  static ViewMessage decode(Object result) {
    result as List<Object?>;
    return ViewMessage(
      viewId: result[0] as int?,
    );
  }
}

class CreateMessage {
  CreateMessage({
    this.viewId,
    this.uri,
    this.type,
    this.packageName,
    this.autoPlay,
    this.hwAcc,
    this.options,
  });

  int? viewId;

  String? uri;

  int? type;

  String? packageName;

  bool? autoPlay;

  int? hwAcc;

  List<String?>? options;

  Object encode() {
    return <Object?>[
      viewId,
      uri,
      type,
      packageName,
      autoPlay,
      hwAcc,
      options,
    ];
  }

  static CreateMessage decode(Object result) {
    result as List<Object?>;
    return CreateMessage(
      viewId: result[0] as int?,
      uri: result[1] as String?,
      type: result[2] as int?,
      packageName: result[3] as String?,
      autoPlay: result[4] as bool?,
      hwAcc: result[5] as int?,
      options: (result[6] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class SetMediaMessage {
  SetMediaMessage({
    this.viewId,
    this.uri,
    this.type,
    this.packageName,
    this.autoPlay,
    this.hwAcc,
  });

  int? viewId;

  String? uri;

  int? type;

  String? packageName;

  bool? autoPlay;

  int? hwAcc;

  Object encode() {
    return <Object?>[
      viewId,
      uri,
      type,
      packageName,
      autoPlay,
      hwAcc,
    ];
  }

  static SetMediaMessage decode(Object result) {
    result as List<Object?>;
    return SetMediaMessage(
      viewId: result[0] as int?,
      uri: result[1] as String?,
      type: result[2] as int?,
      packageName: result[3] as String?,
      autoPlay: result[4] as bool?,
      hwAcc: result[5] as int?,
    );
  }
}

class BooleanMessage {
  BooleanMessage({
    this.viewId,
    this.result,
  });

  int? viewId;

  bool? result;

  Object encode() {
    return <Object?>[
      viewId,
      result,
    ];
  }

  static BooleanMessage decode(Object result) {
    result as List<Object?>;
    return BooleanMessage(
      viewId: result[0] as int?,
      result: result[1] as bool?,
    );
  }
}

class LoopingMessage {
  LoopingMessage({
    this.viewId,
    this.isLooping,
  });

  int? viewId;

  bool? isLooping;

  Object encode() {
    return <Object?>[
      viewId,
      isLooping,
    ];
  }

  static LoopingMessage decode(Object result) {
    result as List<Object?>;
    return LoopingMessage(
      viewId: result[0] as int?,
      isLooping: result[1] as bool?,
    );
  }
}

class VolumeMessage {
  VolumeMessage({
    this.viewId,
    this.volume,
  });

  int? viewId;

  int? volume;

  Object encode() {
    return <Object?>[
      viewId,
      volume,
    ];
  }

  static VolumeMessage decode(Object result) {
    result as List<Object?>;
    return VolumeMessage(
      viewId: result[0] as int?,
      volume: result[1] as int?,
    );
  }
}

class PlaybackSpeedMessage {
  PlaybackSpeedMessage({
    this.viewId,
    this.speed,
  });

  int? viewId;

  double? speed;

  Object encode() {
    return <Object?>[
      viewId,
      speed,
    ];
  }

  static PlaybackSpeedMessage decode(Object result) {
    result as List<Object?>;
    return PlaybackSpeedMessage(
      viewId: result[0] as int?,
      speed: result[1] as double?,
    );
  }
}

class PositionMessage {
  PositionMessage({
    this.viewId,
    this.position,
  });

  int? viewId;

  int? position;

  Object encode() {
    return <Object?>[
      viewId,
      position,
    ];
  }

  static PositionMessage decode(Object result) {
    result as List<Object?>;
    return PositionMessage(
      viewId: result[0] as int?,
      position: result[1] as int?,
    );
  }
}

class DurationMessage {
  DurationMessage({
    this.viewId,
    this.duration,
  });

  int? viewId;

  int? duration;

  Object encode() {
    return <Object?>[
      viewId,
      duration,
    ];
  }

  static DurationMessage decode(Object result) {
    result as List<Object?>;
    return DurationMessage(
      viewId: result[0] as int?,
      duration: result[1] as int?,
    );
  }
}

class DelayMessage {
  DelayMessage({
    this.viewId,
    this.delay,
  });

  int? viewId;

  int? delay;

  Object encode() {
    return <Object?>[
      viewId,
      delay,
    ];
  }

  static DelayMessage decode(Object result) {
    result as List<Object?>;
    return DelayMessage(
      viewId: result[0] as int?,
      delay: result[1] as int?,
    );
  }
}

class TrackCountMessage {
  TrackCountMessage({
    this.viewId,
    this.count,
  });

  int? viewId;

  int? count;

  Object encode() {
    return <Object?>[
      viewId,
      count,
    ];
  }

  static TrackCountMessage decode(Object result) {
    result as List<Object?>;
    return TrackCountMessage(
      viewId: result[0] as int?,
      count: result[1] as int?,
    );
  }
}

class SnapshotMessage {
  SnapshotMessage({
    this.viewId,
    this.snapshot,
  });

  int? viewId;

  String? snapshot;

  Object encode() {
    return <Object?>[
      viewId,
      snapshot,
    ];
  }

  static SnapshotMessage decode(Object result) {
    result as List<Object?>;
    return SnapshotMessage(
      viewId: result[0] as int?,
      snapshot: result[1] as String?,
    );
  }
}

class SpuTracksMessage {
  SpuTracksMessage({
    this.viewId,
    this.subtitles,
  });

  int? viewId;

  Map<Object?, Object?>? subtitles;

  Object encode() {
    return <Object?>[
      viewId,
      subtitles,
    ];
  }

  static SpuTracksMessage decode(Object result) {
    result as List<Object?>;
    return SpuTracksMessage(
      viewId: result[0] as int?,
      subtitles: (result[1] as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
    );
  }
}

class SpuTrackMessage {
  SpuTrackMessage({
    this.viewId,
    this.spuTrackNumber,
  });

  int? viewId;

  int? spuTrackNumber;

  Object encode() {
    return <Object?>[
      viewId,
      spuTrackNumber,
    ];
  }

  static SpuTrackMessage decode(Object result) {
    result as List<Object?>;
    return SpuTrackMessage(
      viewId: result[0] as int?,
      spuTrackNumber: result[1] as int?,
    );
  }
}

class AddSubtitleMessage {
  AddSubtitleMessage({
    this.viewId,
    this.uri,
    this.type,
    this.isSelected,
  });

  int? viewId;

  String? uri;

  int? type;

  bool? isSelected;

  Object encode() {
    return <Object?>[
      viewId,
      uri,
      type,
      isSelected,
    ];
  }

  static AddSubtitleMessage decode(Object result) {
    result as List<Object?>;
    return AddSubtitleMessage(
      viewId: result[0] as int?,
      uri: result[1] as String?,
      type: result[2] as int?,
      isSelected: result[3] as bool?,
    );
  }
}

class AudioTracksMessage {
  AudioTracksMessage({
    this.viewId,
    this.audios,
  });

  int? viewId;

  Map<Object?, Object?>? audios;

  Object encode() {
    return <Object?>[
      viewId,
      audios,
    ];
  }

  static AudioTracksMessage decode(Object result) {
    result as List<Object?>;
    return AudioTracksMessage(
      viewId: result[0] as int?,
      audios: (result[1] as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
    );
  }
}

class AudioTrackMessage {
  AudioTrackMessage({
    this.viewId,
    this.audioTrackNumber,
  });

  int? viewId;

  int? audioTrackNumber;

  Object encode() {
    return <Object?>[
      viewId,
      audioTrackNumber,
    ];
  }

  static AudioTrackMessage decode(Object result) {
    result as List<Object?>;
    return AudioTrackMessage(
      viewId: result[0] as int?,
      audioTrackNumber: result[1] as int?,
    );
  }
}

class AddAudioMessage {
  AddAudioMessage({
    this.viewId,
    this.uri,
    this.type,
    this.isSelected,
  });

  int? viewId;

  String? uri;

  int? type;

  bool? isSelected;

  Object encode() {
    return <Object?>[
      viewId,
      uri,
      type,
      isSelected,
    ];
  }

  static AddAudioMessage decode(Object result) {
    result as List<Object?>;
    return AddAudioMessage(
      viewId: result[0] as int?,
      uri: result[1] as String?,
      type: result[2] as int?,
      isSelected: result[3] as bool?,
    );
  }
}

class VideoTracksMessage {
  VideoTracksMessage({
    this.viewId,
    this.videos,
  });

  int? viewId;

  Map<Object?, Object?>? videos;

  Object encode() {
    return <Object?>[
      viewId,
      videos,
    ];
  }

  static VideoTracksMessage decode(Object result) {
    result as List<Object?>;
    return VideoTracksMessage(
      viewId: result[0] as int?,
      videos: (result[1] as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
    );
  }
}

class VideoTrackMessage {
  VideoTrackMessage({
    this.viewId,
    this.videoTrackNumber,
  });

  int? viewId;

  int? videoTrackNumber;

  Object encode() {
    return <Object?>[
      viewId,
      videoTrackNumber,
    ];
  }

  static VideoTrackMessage decode(Object result) {
    result as List<Object?>;
    return VideoTrackMessage(
      viewId: result[0] as int?,
      videoTrackNumber: result[1] as int?,
    );
  }
}

class VideoScaleMessage {
  VideoScaleMessage({
    this.viewId,
    this.scale,
  });

  int? viewId;

  double? scale;

  Object encode() {
    return <Object?>[
      viewId,
      scale,
    ];
  }

  static VideoScaleMessage decode(Object result) {
    result as List<Object?>;
    return VideoScaleMessage(
      viewId: result[0] as int?,
      scale: result[1] as double?,
    );
  }
}

class VideoAspectRatioMessage {
  VideoAspectRatioMessage({
    this.viewId,
    this.aspectRatio,
  });

  int? viewId;

  String? aspectRatio;

  Object encode() {
    return <Object?>[
      viewId,
      aspectRatio,
    ];
  }

  static VideoAspectRatioMessage decode(Object result) {
    result as List<Object?>;
    return VideoAspectRatioMessage(
      viewId: result[0] as int?,
      aspectRatio: result[1] as String?,
    );
  }
}

class RendererServicesMessage {
  RendererServicesMessage({
    this.viewId,
    this.services,
  });

  int? viewId;

  List<String?>? services;

  Object encode() {
    return <Object?>[
      viewId,
      services,
    ];
  }

  static RendererServicesMessage decode(Object result) {
    result as List<Object?>;
    return RendererServicesMessage(
      viewId: result[0] as int?,
      services: (result[1] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class RendererScanningMessage {
  RendererScanningMessage({
    this.viewId,
    this.rendererService,
  });

  int? viewId;

  String? rendererService;

  Object encode() {
    return <Object?>[
      viewId,
      rendererService,
    ];
  }

  static RendererScanningMessage decode(Object result) {
    result as List<Object?>;
    return RendererScanningMessage(
      viewId: result[0] as int?,
      rendererService: result[1] as String?,
    );
  }
}

class RendererDevicesMessage {
  RendererDevicesMessage({
    this.viewId,
    this.rendererDevices,
  });

  int? viewId;

  Map<Object?, Object?>? rendererDevices;

  Object encode() {
    return <Object?>[
      viewId,
      rendererDevices,
    ];
  }

  static RendererDevicesMessage decode(Object result) {
    result as List<Object?>;
    return RendererDevicesMessage(
      viewId: result[0] as int?,
      rendererDevices: (result[1] as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
    );
  }
}

class RenderDeviceMessage {
  RenderDeviceMessage({
    this.viewId,
    this.rendererDevice,
  });

  int? viewId;

  String? rendererDevice;

  Object encode() {
    return <Object?>[
      viewId,
      rendererDevice,
    ];
  }

  static RenderDeviceMessage decode(Object result) {
    result as List<Object?>;
    return RenderDeviceMessage(
      viewId: result[0] as int?,
      rendererDevice: result[1] as String?,
    );
  }
}

class RecordMessage {
  RecordMessage({
    this.viewId,
    this.saveDirectory,
  });

  int? viewId;

  String? saveDirectory;

  Object encode() {
    return <Object?>[
      viewId,
      saveDirectory,
    ];
  }

  static RecordMessage decode(Object result) {
    result as List<Object?>;
    return RecordMessage(
      viewId: result[0] as int?,
      saveDirectory: result[1] as String?,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ViewMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else     if (value is CreateMessage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else     if (value is SetMediaMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else     if (value is BooleanMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else     if (value is LoopingMessage) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else     if (value is VolumeMessage) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else     if (value is PlaybackSpeedMessage) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else     if (value is PositionMessage) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else     if (value is DurationMessage) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else     if (value is DelayMessage) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else     if (value is TrackCountMessage) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else     if (value is SnapshotMessage) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else     if (value is SpuTracksMessage) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else     if (value is SpuTrackMessage) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else     if (value is AddSubtitleMessage) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else     if (value is AudioTracksMessage) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else     if (value is AudioTrackMessage) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else     if (value is AddAudioMessage) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else     if (value is VideoTracksMessage) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else     if (value is VideoTrackMessage) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    } else     if (value is VideoScaleMessage) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    } else     if (value is VideoAspectRatioMessage) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    } else     if (value is RendererServicesMessage) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else     if (value is RendererScanningMessage) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    } else     if (value is RendererDevicesMessage) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    } else     if (value is RenderDeviceMessage) {
      buffer.putUint8(154);
      writeValue(buffer, value.encode());
    } else     if (value is RecordMessage) {
      buffer.putUint8(155);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return ViewMessage.decode(readValue(buffer)!);
      case 130: 
        return CreateMessage.decode(readValue(buffer)!);
      case 131: 
        return SetMediaMessage.decode(readValue(buffer)!);
      case 132: 
        return BooleanMessage.decode(readValue(buffer)!);
      case 133: 
        return LoopingMessage.decode(readValue(buffer)!);
      case 134: 
        return VolumeMessage.decode(readValue(buffer)!);
      case 135: 
        return PlaybackSpeedMessage.decode(readValue(buffer)!);
      case 136: 
        return PositionMessage.decode(readValue(buffer)!);
      case 137: 
        return DurationMessage.decode(readValue(buffer)!);
      case 138: 
        return DelayMessage.decode(readValue(buffer)!);
      case 139: 
        return TrackCountMessage.decode(readValue(buffer)!);
      case 140: 
        return SnapshotMessage.decode(readValue(buffer)!);
      case 141: 
        return SpuTracksMessage.decode(readValue(buffer)!);
      case 142: 
        return SpuTrackMessage.decode(readValue(buffer)!);
      case 143: 
        return AddSubtitleMessage.decode(readValue(buffer)!);
      case 144: 
        return AudioTracksMessage.decode(readValue(buffer)!);
      case 145: 
        return AudioTrackMessage.decode(readValue(buffer)!);
      case 146: 
        return AddAudioMessage.decode(readValue(buffer)!);
      case 147: 
        return VideoTracksMessage.decode(readValue(buffer)!);
      case 148: 
        return VideoTrackMessage.decode(readValue(buffer)!);
      case 149: 
        return VideoScaleMessage.decode(readValue(buffer)!);
      case 150: 
        return VideoAspectRatioMessage.decode(readValue(buffer)!);
      case 151: 
        return RendererServicesMessage.decode(readValue(buffer)!);
      case 152: 
        return RendererScanningMessage.decode(readValue(buffer)!);
      case 153: 
        return RendererDevicesMessage.decode(readValue(buffer)!);
      case 154: 
        return RenderDeviceMessage.decode(readValue(buffer)!);
      case 155: 
        return RecordMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class VlcPlayerApi {
  /// Constructor for [VlcPlayerApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  VlcPlayerApi({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String __pigeon_messageChannelSuffix;

  Future<void> initialize() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.initialize$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> create(CreateMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.create$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> dispose(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.dispose$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setStreamUrl(SetMediaMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setStreamUrl$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> play(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.play$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> pause(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.pause$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stop(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.stop$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<BooleanMessage> isPlaying(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.isPlaying$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as BooleanMessage?)!;
    }
  }

  Future<BooleanMessage> isSeekable(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.isSeekable$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as BooleanMessage?)!;
    }
  }

  Future<void> setLooping(LoopingMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setLooping$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> seekTo(PositionMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.seekTo$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PositionMessage> position(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.position$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as PositionMessage?)!;
    }
  }

  Future<DurationMessage> duration(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.duration$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as DurationMessage?)!;
    }
  }

  Future<void> setVolume(VolumeMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setVolume$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<VolumeMessage> getVolume(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVolume$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as VolumeMessage?)!;
    }
  }

  Future<void> setPlaybackSpeed(PlaybackSpeedMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setPlaybackSpeed$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PlaybackSpeedMessage> getPlaybackSpeed(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getPlaybackSpeed$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as PlaybackSpeedMessage?)!;
    }
  }

  Future<SnapshotMessage> takeSnapshot(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.takeSnapshot$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as SnapshotMessage?)!;
    }
  }

  Future<TrackCountMessage> getSpuTracksCount(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getSpuTracksCount$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as TrackCountMessage?)!;
    }
  }

  Future<SpuTracksMessage> getSpuTracks(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getSpuTracks$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as SpuTracksMessage?)!;
    }
  }

  Future<void> setSpuTrack(SpuTrackMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setSpuTrack$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<SpuTrackMessage> getSpuTrack(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getSpuTrack$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as SpuTrackMessage?)!;
    }
  }

  Future<void> setSpuDelay(DelayMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setSpuDelay$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<DelayMessage> getSpuDelay(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getSpuDelay$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as DelayMessage?)!;
    }
  }

  Future<void> addSubtitleTrack(AddSubtitleMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.addSubtitleTrack$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<TrackCountMessage> getAudioTracksCount(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAudioTracksCount$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as TrackCountMessage?)!;
    }
  }

  Future<AudioTracksMessage> getAudioTracks(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAudioTracks$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as AudioTracksMessage?)!;
    }
  }

  Future<void> setAudioTrack(AudioTrackMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setAudioTrack$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<AudioTrackMessage> getAudioTrack(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAudioTrack$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as AudioTrackMessage?)!;
    }
  }

  Future<void> setAudioDelay(DelayMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setAudioDelay$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<DelayMessage> getAudioDelay(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAudioDelay$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as DelayMessage?)!;
    }
  }

  Future<void> addAudioTrack(AddAudioMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.addAudioTrack$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<TrackCountMessage> getVideoTracksCount(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoTracksCount$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as TrackCountMessage?)!;
    }
  }

  Future<VideoTracksMessage> getVideoTracks(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoTracks$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as VideoTracksMessage?)!;
    }
  }

  Future<void> setVideoTrack(VideoTrackMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setVideoTrack$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<VideoTrackMessage> getVideoTrack(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoTrack$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as VideoTrackMessage?)!;
    }
  }

  Future<void> setVideoScale(VideoScaleMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setVideoScale$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<VideoScaleMessage> getVideoScale(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoScale$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as VideoScaleMessage?)!;
    }
  }

  Future<void> setVideoAspectRatio(VideoAspectRatioMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.setVideoAspectRatio$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<VideoAspectRatioMessage> getVideoAspectRatio(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getVideoAspectRatio$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as VideoAspectRatioMessage?)!;
    }
  }

  Future<RendererServicesMessage> getAvailableRendererServices(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getAvailableRendererServices$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as RendererServicesMessage?)!;
    }
  }

  Future<void> startRendererScanning(RendererScanningMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.startRendererScanning$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopRendererScanning(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.stopRendererScanning$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<RendererDevicesMessage> getRendererDevices(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.getRendererDevices$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as RendererDevicesMessage?)!;
    }
  }

  Future<void> castToRenderer(RenderDeviceMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.castToRenderer$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<BooleanMessage> startRecording(RecordMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.startRecording$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as BooleanMessage?)!;
    }
  }

  Future<BooleanMessage> stopRecording(ViewMessage msg) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.flutter_vlc_player_platform_interface.VlcPlayerApi.stopRecording$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[msg]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as BooleanMessage?)!;
    }
  }
}
